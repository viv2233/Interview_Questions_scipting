Deloitte DevOps Engineer – First Round Interview Questions (Part 1)

1. How would you architect a secure, auditable CI/CD pipeline in Azure DevOps for multi-environment (Dev/Test/Prod) deployments?

2. Differentiate between classic pipelines and YAML pipelines in Azure DevOps. Which one is better for Infrastructure-as-Code and why?

3. What rollback strategies have you implemented in mission-critical environments? Can you detail a real-world example?

4. Explain the use of Jenkins Shared Libraries or Azure DevOps Templates for enterprise-level DRY (Don't Repeat Yourself) pipelines.

5. How do you handle multi-repo CI/CD pipelines when deploying a microservices-based application with interdependencies?

6. Describe techniques to cache Docker layers or NuGet/NPM packages in pipelines for speed optimization.

7. How do you integrate Azure Key Vault with DevOps pipelines securely, especially with rotating secrets or certificates?

8. What is the purpose of manual intervention gates, and how would you enforce them before production release?

9. Explain how you implement compliance as code (security scanning, code coverage, policy checks) in Azure 
DevOps pipelines.

10. How do you enforce pipeline security – from source control (Git) to deployment? Tools? Policies?

11. What strategies do you use for managing Terraform state in a team? How do you handle state locking and backups in Azure?

12. Explain the differences between terraform plan, terraform refresh, and terraform apply. When should each be used?

13. How do you modularize Terraform for large-scale projects? Give examples.

14. How do you detect and resolve drift in Terraform-managed resources?

15. Explain how to set up remote Terraform backends in Azure (Blob Storage) and enable state locking with Azure CosmosDB or similar.

16. Show a use-case for for_each vs count in a real Terraform deployment. When should dynamic blocks be preferred?

17. Explain the purpose and real-world use of lifecycle blocks (prevent_destroy, create_before_destroy) in Terraform.
============================
DevOps Interview Experience – Williams Lea (DevOps Engineer)
🔧 Linux | AWS | Kubernetes | Terraform | CI/CD | CloudOps

Sharing some of the questions discussed during the interview as Part 1:

1. How does API Gateway work with AWS Lambda
2. How to protect API endpoints
3.What are tokens in API security
4.What is JWT (JSON Web Token) and where is it used
5. How to deploy a React app using DevOps practices
6. How to host applications in AWS S3
7.What is the alternative to AWS CloudFront
8.What are Bitbucket runners and how do they work
9. How to securely store secrets in Bitbucket Pipelines
10.What are pre-commit hooks in DevOps
11. How to troubleshoot EC2 provisioning issues in a CI/CD pipeline
12. How to check IAM permission issues during deployment

Follow for more hands-on DevOps interview insights and real-world cloud solutions. Part 2 coming soon.



 Containers & Kubernetes (AKS)

18. Write a Dockerfile for a secure Python/Node.js API with multistage builds and best practices.

19. How do multistage Docker builds improve security and reduce image size?

20. Differentiate between Docker volumes and bind mounts. When do you use each in a Kubernetes environment?

21. Explain the role of kubelet, kube-apiserver, and kube-proxy in a managed AKS cluster.

22. How do you implement blue-green or canary deployments in AKS using Helm or service mesh (e.g., Istio)?

23. StatefulSet vs Deployment – when do you use each in real-world AKS workloads?

24. What are liveness and readiness probes? Give a practical example of how incorrect config can lead to downtime.

25. How do you securely manage secrets and certificates in AKS using Azure Key Vault and CSI drivers?
=====================
𝗤. 𝗖𝗮𝗻 𝘆𝗼𝘂 𝘀𝗵𝗮𝗿𝗲 𝗮𝗻 𝗶𝗻𝘀𝘁𝗮𝗻𝗰𝗲 𝘄𝗵𝗲𝗿𝗲 𝘆𝗼𝘂 𝗽𝗿𝗼𝘃𝗶𝗱𝗲𝗱 𝗮 𝘀𝗼𝗹𝘂𝘁𝗶𝗼𝗻 𝗳𝗼𝗿 𝗰𝗼𝘀𝘁 𝗼𝗽𝘁𝗶𝗺𝗶𝘇𝗮𝘁𝗶𝗼𝗻 𝘄𝗵𝗶𝗹𝗲 𝗺𝗮𝗻𝗮𝗴𝗶𝗻𝗴 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲 𝗮𝗹𝗹𝗼𝗰𝗮𝘁𝗶𝗼𝗻?
Our cloud infrastructure was over-provisioned, leading to unnecessary costs. 
I implemented auto-scaling based on actual usage metrics and utilized spot instances for non-critical workloads. 
Additionally, I restructured the storage solution by moving infrequently accessed data to lower-cost storage classes. These changes resulted in a significant reduction in our monthly cloud expenses without compromising performance.

𝗤. 𝗖𝗮𝗻𝗮𝗿𝘆 𝗗𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁: Gradually rolling out the new version to a small subset of users before a full deployment.

𝗤. 𝗥𝗼𝗹𝗹𝗶𝗻𝗴 𝗗𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁: Incrementally updating instances or servers with the new version, ensuring at least some instances are always running the old version.

𝗤. 𝗗𝗲𝘀𝗰𝗿𝗶𝗯𝗲 𝗮 𝘀𝗶𝘁𝘂𝗮𝘁𝗶𝗼𝗻 𝘄𝗵𝗲𝗿𝗲 𝘁𝗵𝗲 𝗲𝗻𝘁𝗶𝗿𝗲 𝗽𝗿𝗼𝗱𝘂𝗰𝘁𝗶𝗼𝗻 𝗶𝗻𝘀𝘁𝗮𝗻𝗰𝗲 𝗰𝗿𝗮𝘀𝗵𝗲𝗱, 𝗮𝗻𝗱 𝘆𝗼𝘂 𝗵𝗮𝗱 𝘁𝗼 𝗳𝗶𝘅 𝗶𝘁 𝗾𝘂𝗶𝗰𝗸𝗹𝘆.
In one instance, our production server crashed due to a
memory leak in the application. I quickly identified the issue using monitoring tools like Prometheus and logs from ELK Stack. 
To resolve it, I restarted the affected services and temporarily scaled up the infrastructure to handle the load. I then worked with the development team to identify and fix the memory leak, ensuring it didn’t happen again.

𝗤.𝗖𝗹𝗼𝘂𝗱 𝗡𝗔𝗧 𝗚𝗮𝘁𝗲𝘄𝗮𝘆:
Provides outbound internet access for instances in a private network without exposing them to inbound traffic.
Used for secure, private instances that need internet access without being directly accessible from the internet.

𝗤. 𝗩𝗣𝗖 𝗣𝗲𝗲𝗿𝗶𝗻𝗴: A network connection between two VPCs that allows traffic to be routed between them using private IP addresses. This is useful for connecting resources across different VPCs without going over the public internet.

𝗤. 𝗛𝗮𝗻𝗱𝗹𝗶𝗻𝗴 𝗠𝘂𝗹𝘁𝗶𝗽𝗹𝗲 𝗠𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀: Use Kubernetes namespaces to isolate microservices, and manage their deployment using Helm charts or a CI/CD tool like Jenkins, ArgoCD, or GitLab CI/CD. Implement service discovery, networking, and security policies to ensure seamless communication between microservices.

𝗤. 𝗛𝗮𝘃𝗲 𝘆𝗼𝘂 𝘄𝗼𝗿𝗸𝗲𝗱 𝘄𝗶𝘁𝗵 𝗔𝘂𝘁𝗼 𝗦𝗰𝗮𝗹𝗶𝗻𝗴 𝗚𝗿𝗼𝘂𝗽𝘀 (𝗔𝗦𝗚)?
Yes, I have worked with ASGs to automatically scale the number of instances in response to demand. ASGs are configured with policies that adjust the desired capacity based on metrics such as CPU utilization, helping to maintain application performance and optimize costs.
=================
💡 Technical Round 1 – Questions Asked:
1. Give me your Introduction
2. What is VPC? What are its components?
3. How do you enable communication between VPC components and an S3 bucket without exposing to the internet?
4. What are storage classes in S3? Explain types with use-cases
5. What is CDN? How to set up CloudFront end-to-end?
6. App is hosted in EC2 and accessible via Public IP & CDN DNS. How to restrict Public IP access and allow only CDN DNS?
7. Route53 vs CloudFront — what’s the difference?
8. How to set up Route53 from scratch?
9. What are different storage and database services in AWS?
10. How do you configure RDS?
11. How did you maintain state in the applications you worked on?
12. What are the different types of metrics, and how do you fetch them?
13. How to create a Grafana dashboard integrated with Prometheus?
14. Why Fluentbit over Logstash?
15. What is Jaeger used for?
16. Benefits of Service Mesh (e.g., Istio)?
17. Explain Kubernetes architecture
18. What are the different Kubernetes services?
19. How to securely expose an application to the internet using AWS + Kubernetes?
20. How to autoscale pods based on traffic?
21. Write a manifest file for NGINX deployment
22. Write manifests for HPA, VPA, StatefulSet
23. What is RBAC? Explain with example
24. ConfigMap vs Secrets — What’s the difference?
25. What is Persistent Volume? Types of storage classes?
26. What are PVCs and their Access Modes?
27. Security services in AWS?
28. What did you implement for security in your projects?
29. Docker vs Kubernetes
30. Write a multistage Dockerfile
31. Docker networking types
32. What are Terraform modules?
33. Write a Terraform file to create EC2 + ALB
34. How do you manage state files in Terraform?
35. What is state locking? How to manage it?
36. How to configure multiple AWS providers in one Terraform infra?
37. How to manage variables in Terraform?
38. Linux command to check CPU & memory usage
39. How to find IP of current system & domain (via commands)?
40. Types of Load Balancers based on OSI model
=========================
Azure DevOps Interview Series – Part 2 

Subtopic Focus: Terraform with Azure DevOps, IaC, Security & Compliance

1. How do you securely store and retrieve Terraform state files in Azure?

2. Explain how you integrate Terraform workflows with Azure DevOps pipelines.

3. What’s the difference between local backend and remote backend in Terraform? Which is preferable in enterprise pipelines?

4. How do you implement role-based access control (RBAC) with Terraform and Azure?

5. Describe the use of terraform workspace in a CI/CD environment.

6. How do you handle state locking in Terraform when used with Azure DevOps pipelines?

7. What’s the best practice for managing secrets like client secrets in a Terraform pipeline?

8. How do you manage Terraform module versioning across multiple pipelines?

9. Describe a secure strategy to store and inject service principal credentials for Terraform pipelines.

10. What is the use of azurerm_provider block and how do you manage multiple providers?

11. How do you validate and lint Terraform code during pull request validation in Azure Repos?

12. Explain how terraform plan and terraform apply stages are designed in a gated pipeline.

13. How do you set up automated cost estimation for Terraform resources in Azure?

14. What tools can be used for Terraform security scanning and how do you integrate them into Azure DevOps?

15. How do you enforce tagging and naming conventions using policy as code in Terraform?

16. How do you manage environment-specific variables in Terraform for staging, dev, and prod?

17. What are Sentinel or OPA policies, and how do you use them in IaC governance?

18. How do you design approval workflows for infrastructure changes managed via Terraform?

19. Explain how you would implement drift detection in Terraform-managed infrastructure.

20. What’s the best approach to handle Terraform state refactoring?

21. How do you implement version pinning for Terraform providers and modules?

22. How do you monitor and audit who ran terraform apply and when?

23. What is your rollback strategy if a Terraform deployment introduces breaking changes?

24. How would you structure a Terraform mono-repo vs multi-repo in Azure DevOps?

25. Describe how you integrate Azure Policy and Terraform for compliance enforcement.
===========================================
💼 DevOps Interview Questions at Deloitte – 5+ YOE Edition

🧠 Round 1 – Infra Design & Cloud Foundations (45 mins)
• Walk through your CI/CD pipeline. How is it secured from code to deploy?
• What does a well-architected multi-account AWS setup look like for DevSecOps?
• EBS vs EFS vs FSx. walk through use cases and tradeoffs
• How does kubelet handle node pressure? What happens when the disk fills?
• How do you manage secrets across staging, QA, and prod, without exposure?
• Describe your logging strategy. How do you avoid observability blind spots?
• How do you handle Terraform module upgrades with minimal impact?
• Bash one-liner: Delete all .tmp files older than 15 days in /var/log
• What happens in an S3 PUT call from CLI to data persistence?
• How do you implement drift detection across infra environments?

🔥 Round 2 – Live Fire, Triage & RCA Thinking (75 mins)
• A Canary deploy passed. But prod is throwing timeouts. Where do you begin?
• Karpenter provisioned double the expected nodes. What’s misconfigured?
• Vault token expiry caused auth failures across services, RCA start to finish?
• App gives 200 OK, but payment gateway isn’t triggering. What’s your hypothesis tree?
• Your Helm upgrade corrupted the stateful workload rollback strategy?
• EKS cluster degraded after configMap hot reload. What changed?
• Simulate partial network loss to a single AZ. How do you test HA failover?
• Jenkins jobs queue up endlessly. What metrics do you check first?
• TLS handshake failed after ALB config update, root cause analysis?
• Audit found secrets exposed in Git history. What’s your fix + prevention strategy?

💬 Round 3 – Engineering Judgment & Team Fit (30 mins)
• What’s your checklist before calling something “production-ready”?
• How do you coach juniors without overwhelming them with tooling?
• When was the last time you wrote (or read) a meaningful postmortem?
• You’re asked to cut scope for reliability. Where do you push back?
• What’s your incident response philosophy when metrics are fine, but users complain?

💡 TL;DR:
If you haven’t:
Simulated partial network loss across AZs
Investigated a 200 OK bug that masked real failure
Rolled back a Helm upgrade under pressure
Recovered from a secret leakage in version control

Then Deloitte interviews won’t test you. They’ll expose the gaps in your chaos muscle.

🧯 But what if you trained before prod burned?

